데이터베이스의 목적
1. 데이터의 효율적인 검색과 수정
2. 데이터 중복의 최소화
3. 데이터의 일관성 유지
4. 다수 사용자와의 데이터의 효율적인 공유
5. 데이터의 논리적, 물리적 독립성 유지

DBMS Database Management System - 데이터베이스를 효율적으로 관리하기 위한 시스템
현재는 관계형 데이터 베이스 RDB Ralational Database 가장 많이 보편적으로 사용되고 있다.
MySQL, Oracle, MSSql....

MySQL의 장점
- 무료로도 사용가능
- 안정성과 효율성이 충분히 검증되어 facebook, twitter, linkedin 등등 많은 회사에서 사용 중이다.
- java c c++ Perl Python PHP 등 다양한 언어와 함께 많이 사용된다.

2010년 썬(MySQL) -> Oracle이 썬을 인수하면서 MySQL 함께 Oracle로 인수됐는데
Oracle Database를 이미 가지고 있기 때문에 많은 개발자들이 MariaDB라는 MySQL의 무료 공개판을 배포하였다.

SQL Structured Query Language
관계형 데이터베이스에서 데이터를 검색/수정/삽입/삭제/갱신(업데이트)하기 위한 데이터베이스 언어이다.

DDL Data Definition Language
데이터 정의 언어   CREATE DROP ALTER.... 

DML Data Manipulation Language
데이터 조작 언어 INSERT, DELETE, UPDATE, SELECT....

DCL Data Control Language
데이터 제어 언어  GRANT, REVOKE, COMMIT....


관계형 데이터베이스 - 관계형 데이터베이스에서는 테이블 형태로 정보를 저장하고 관리한다.
테이블은 레코드 Record 속성 Attribute 으로 이루어진 2차원 배열의 형태를 가진다.
레코드가 각 행 row를(x축) 의미하고 속성 attribute는 열 column(y축)에 대응한다.

일반적으로 하나의 응용 프로그램은 여러 개의 테이블을 필요로 한다.
관계형 데이터베이스에서는 하나의 응용 서비스 구현에 필요한 테이블들을 묶어서 사용한다.
즉 하나의 데이터베이스에는 여러 개의 테이블이 포함된다.

JDBC (java database connectivity) Java가 데이터베이스에 쉽게 접근하도록 도와준다.
JDBC를 이용하면 DBMS의 종류(Oracle, MariaDB, MySQL, MSSQL) 종류에 관계없이 동일한 접근 방법을 제공받을 수 있다.

mysql-connector-java-8.0.27 // MySQL 설치 시 함께 설치된 경로에 위치하는 파일을
WEB-INF > lib 에 복사한다.

1. JDBC 드라이버 로딩
2. DB 접속을 위한 Connection 객체 생성
3. SQL 명령문을 전달하기 위한 Statement 객체 생성
4. Statement 객체를 이용하여 Query 실행
5. DB로부터 전송된 Query 실행 결과 처리
6. 사용된 객체 닫기


Connection Pool
JDBC 를 이용할 때 가장 많은 자원이 소요되는 부분이 데이터베이스 연동에 필요한 Connection 객체를
생성하는 부분이다. 시스템 성능을 급격하게 저하시킬 수 있다.
이러한  문제를 해결하기 위한 하나의 방법은 데이터베이스 커넥션 풀을 이용하는 방법이다.
커넥션 풀을 이용하면 사용자가 요청할 때마다 매번 새로운 커넥션 객체를 생성하지 않고 일정 갯수의 커넥션 객체를
미리 생성해 놓고 사용자들의 요청이 있을 때마다 가용한 커넥션 객체를 할당하는 방법을 사용한다.

위치 : WebContent - META-INF
context.xml (DB연결 설정, 객체의 개수, 최대 유지 설정)

위치 : src - util
ConnectionPoll.java (객체 생성)


DAO Data Access Object 데이터베이스 접속 기능을 공유하기 위한 java 클래스이다.
DAO를 이용하면 JSP에 구현된 데이터베이스 접속 및 수정 코드를 DAO 클래스로 모두 이관시키고
JSP에서는 DAO를 호출하여 필요한 기능을 구현하는 방식으로 구조가 변경된다.

DAO는 일반적으로 테이블 당 하나가 만들어진다. 핵심은 DAO 클래스를 이용하여 데이터베이스 처리와 
HTTP 통신 처리 부분을 분리시켜 모듈화하는 것이다. 이것을 통해 코드의 단순화와 재사용성을 높일 수 있다.
